package corejava.threading.nqueens;

import java.util.concurrent.*;


class forLoops implements Callable<Long>{

	int a;
	
	public forLoops(int a) {
		this.a=a;
	}
	
	@Override
	public Long call() throws Exception {

		int a2 = 0, b2 = 1, c2 = 2, d2 = 3, e2 = 4, f2 = 5, g2 = 6, h2 = 7;
    		
		for(int b=0; b<=7; b++) {
			for(int c=0; c<=7; c++) {
				for(int d=0; d<=7; d++) {
					for(int e=0; e<=7; e++) {
						for(int f=0; f<=7; f++) {
							for(int g=0; g<=7; g++) {
								for(int h=0; h<=7; h++) {

									if(Nqueen.isSafePosition(a, b, a2, b2) && Nqueen.isSafePosition(a, c, a2, c2) && Nqueen.isSafePosition(a, d, a2, d2) && Nqueen.isSafePosition(a, e, a2, e2) && Nqueen.isSafePosition(a, f, a2, f2) && Nqueen.isSafePosition(a, g, a2, g2) && Nqueen.isSafePosition(a, h, a2, h2)) {
										
										if(Nqueen.isSafePosition(b, c, b2, c2) && Nqueen.isSafePosition(b, d, b2, d2) && Nqueen.isSafePosition(b, e, b2, e2) && Nqueen.isSafePosition(b, f, b2, f2) && Nqueen.isSafePosition(b, g, b2, g2) && Nqueen.isSafePosition(b, h, b2, h2)) {
											if(Nqueen.isSafePosition(c, d, c2, d2) && Nqueen.isSafePosition(c, e, c2, e2) && Nqueen.isSafePosition(c, f, c2, f2) && Nqueen.isSafePosition(c, g, c2, g2) && Nqueen.isSafePosition(c, h, c2, h2)) {	
												if(Nqueen.isSafePosition(d, e, d2, e2) && Nqueen.isSafePosition(d, f, d2, f2) && Nqueen.isSafePosition(d, g, d2, g2) && Nqueen.isSafePosition(d, h, d2, h2)) {
													if(Nqueen.isSafePosition(e, f, e2, f2) && Nqueen.isSafePosition(e, g, e2, g2) && Nqueen.isSafePosition(e, h, e2, h2)) { 
														if(Nqueen.isSafePosition(f, g, f2, g2) && Nqueen.isSafePosition(f, h, f2, h2)) {
															if(Nqueen.isSafePosition(g, h, g2, h2)) {
											
										System.out.println("Position " + Nqueen.i + ") " + a + " - " + b + " - " + c + " - " + d + " - " + e + " - " + f + " - " + g + " - " + h);
										Nqueen.i++;
									}
									}
									}										
									}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}		        			        	
    	
    	
    	
		
    	return null;
    	
	}
	
}


public class Nqueen {
	static int i = 1;
	static int a;

	public static boolean isSafePosition(int y1, int y2, int x1, int x2) {
		if(y1 != y2 && x1 != x2) {
			double slope = ((y2 - y1)*1.0) / (x2 - x1);
			if (slope != 1.0 && slope != -1.0) {
				return true;
			}
		}
		return false;
	}

	
	public static void main(String[] args) {

		Future<Long> future = null ; 
		ExecutorService executor = Executors.newFixedThreadPool(8);
		long startTime = System.currentTimeMillis();
		for(a=0; a<=7; a++) {		
			future = executor.submit(new forLoops(a));
		}
		
		executor.shutdown();
        while (!executor.isTerminated()) {
        }
        long endTime = System.currentTimeMillis();
    	 
        System.out.println("Time Taken "+ (endTime-startTime));
		
/*		try {
			System.out.println("Time taken: " + future.get());
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
	}
	
    public static CompletableFuture<Integer> createCompletableFuture() {
        CompletableFuture<Integer>  result = CompletableFuture.supplyAsync(() -> {
            try {
                // simulate long running task
                Thread.sleep(5000);
            } catch (InterruptedException e) { }
            return 20;
        });
        return result;
    }


}







