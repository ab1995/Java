package corejava.threading.nqueens;

import java.util.concurrent.*;


class Dimension{
	private int x1, x2, y1, y2;
	
	public Dimension(int y1, int y2, int x1, int x2) {
		this.y1=y1;
		this.y2=y2;
		this.x1=x1;
		this.x2=x2;
	}
	
	public int gety1(){
		return this.y1;
	}
	
	public int getY2(){
		return this.y2;
	}
	
	public int getX1(){
		return this.x1;
	}
	
	public int getX2(){
		return this.x2;
	}
}


public class Nqueen {
	static int i = 1;
	static int a;

	public static boolean isSafePosition(int y1, int y2, int x1, int x2) {
		if(y1 != y2 && x1 != x2) {
			double slope = ((y2 - y1)*1.0) / (x2 - x1);
			if (slope != 1.0 && slope != -1.0) {
				return true;
			}
		}
		return false;
	}

	
	public static void main(String[] args) {
		
		long startTime = System.currentTimeMillis();
		int a2 = 0, b2 = 1, c2 = 2, d2 = 3, e2 = 4, f2 = 5, g2 = 6, h2 = 7;
		
		
		ExecutorService executor = Executors.newFixedThreadPool(8);
		
		for(a=0; a<=7; a++) {
			  executor.submit(new Callable<Long>() {
		        public Long call(){
		           
		        	}
		    });
		}

		
		
	
		
		long endTime = System.currentTimeMillis();
		System.out.println("Time taken: " + (endTime - startTime));
	}


}
